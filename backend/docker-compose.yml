# volumes:
#   pgdata:
#     name: esd_pgdata
#   rabbitmq_data:
#     name: esd_rabbitmq_data

networks:
  spm-net:
    driver: bridge
    name: spm-net

services:
  kong:
    image: kong/kong-gateway:3.9.0.1
    container_name: kong-dbless
    restart: always
    networks:
      - spm-net
    volumes:
      - ./kong:/kong/declarative
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: "/kong/declarative/kong.yml"
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_URL: "http://localhost:8002"
      KONG_LICENSE_DATA: ""
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
      - "8445:8445"
      - "8003:8003"
      - "8004:8004"

#   prometheus:
#     image: prom/prometheus:latest
#     container_name: prometheus
#     networks:
#       - spm-net
#     volumes:
#       - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
#     ports:
#       - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - spm-net
    ports:
      - "1010:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards

  project:
    build: ./services/atomic/project
    container_name: project
    networks:
      - spm-net
    ports:
      - "5200:5200"
    environment:
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_API_KEY: ${SUPABASE_API_KEY}
    

  tasks:
    build: ./services/atomic/tasks
    container_name: tasks
    networks:
      - spm-net
    ports:
      - "5500:5500"
    environment:
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_API_KEY: ${SUPABASE_API_KEY}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}

  user:
    build: ./services/atomic/user
    container_name: user
    networks:
      - spm-net
    ports:
      - "5100:5100"
    environment:
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_API_KEY: ${SUPABASE_API_KEY}
      SUPABASE_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}

  schedule:
    build: ./services/atomic/schedule
    container_name: schedule
    networks:
      - spm-net
    ports:
      - "5300:5300"
    environment:
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_API_KEY: ${SUPABASE_API_KEY}

#   rabbitmq:
#     image: rabbitmq:3-management
#     container_name: rabbitmq
#     hostname: foodapp-rabbit
#     restart: always
#     ports:
#       - "5672:5672" # RabbitMQ Client Connection
#       - "15672:15672" # RabbitMQ Management UI
#     volumes:
#       - rabbitmq_data:/var/lib/rabbitmq
#     networks:
#       - spm-net
#     healthcheck: # Good Code
#       test: ["CMD", "rabbitmqctl", "status"]
#       interval: 10s
#       retries: 5
#       start_period: 20s
#       timeout: 5s

#   rabbitmq-setup:
#     build: ./rabbitmq-setup
#     container_name: amqp-setup
#     depends_on:
#       rabbitmq:
#         condition: service_healthy
#     networks:
#       - spm-net