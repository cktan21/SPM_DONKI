networks:
    spm-net:
        driver: bridge
        name: spm-net

services:
    kong:
        image: kong/kong-gateway:3.9.0.1
        container_name: kong-dbless
        restart: always
        networks: [spm-net]
        volumes:
            - ./kong:/kong/declarative
        environment:
            KONG_DATABASE: "off"
            KONG_DECLARATIVE_CONFIG: "/kong/declarative/kong.yml"
            KONG_PROXY_ACCESS_LOG: "/dev/stdout"
            KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
            KONG_PROXY_ERROR_LOG: "/dev/stderr"
            KONG_ADMIN_ERROR_LOG: "/dev/stderr"
            KONG_ADMIN_LISTEN: "0.0.0.0:8001"
            KONG_ADMIN_GUI_URL: "http://localhost:8002"
            KONG_LICENSE_DATA: ""
        ports:
            - "8000:8000"
            - "8443:8443"
            - "8001:8001"
            - "8444:8444"
            - "8002:8002"
            - "8445:8445"
            - "8003:8003"
            - "8004:8004"

    project:
        build: ./services/atomic/project
        container_name: project
        networks: [spm-net]
        ports: ["5200:5200"]
        environment:
            SUPABASE_URL: ${SUPABASE_URL}
            SUPABASE_API_KEY: ${SUPABASE_API_KEY}
        develop:
            watch:
                # Fast path: sync source edits into container
                - action: sync
                  path: ./services/atomic/project
                  target: /app
                  ignore:
                      - "**/__pycache__/**"
                      - "**/.venv/**"
                      - "**/node_modules/**"
                      - "**/.pytest_cache/**"
                      - ".git/**"
                # Clean rebuild only when Dockerfile / deps change
                - action: rebuild
                  path: ./services/atomic/project/Dockerfile
                - action: rebuild
                  path: ./services/atomic/project/requirements.txt
                  # If you use Poetry/pyproject, add:
                  # path: ./services/atomic/project/pyproject.toml

    tasks:
        build: ./services/atomic/tasks
        container_name: tasks
        networks: [spm-net]
        ports: ["5500:5500"]
        environment:
            SUPABASE_URL: ${SUPABASE_URL}
            SUPABASE_API_KEY: ${SUPABASE_API_KEY}
            INTERNAL_API_KEY: ${INTERNAL_API_KEY}
        develop:
            watch:
                - action: sync
                  path: ./services/atomic/tasks
                  target: /app
                  ignore:
                      - "**/__pycache__/**"
                      - "**/.venv/**"
                      - "**/node_modules/**"
                      - "**/.pytest_cache/**"
                      - ".git/**"
                - action: rebuild
                  path: ./services/atomic/tasks/Dockerfile
                - action: rebuild
                  path: ./services/atomic/tasks/requirements.txt
                  # or pyproject.toml / poetry.lock if applicable

    user:
        build: ./services/atomic/user
        container_name: user
        networks: [spm-net]
        ports: ["5100:5100"]
        environment:
            SUPABASE_URL: ${SUPABASE_URL}
            SUPABASE_API_KEY: ${SUPABASE_API_KEY}
            SUPABASE_JWT_SECRET: ${SUPABASE_JWT_SECRET}
            SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
        develop:
            watch:
                - action: sync
                  path: ./services/atomic/user
                  target: /app
                  ignore:
                      - "**/__pycache__/**"
                      - "**/.venv/**"
                      - "**/node_modules/**"
                      - "**/.pytest_cache/**"
                      - ".git/**"
                - action: rebuild
                  path: ./services/atomic/user/Dockerfile
                - action: rebuild
                  path: ./services/atomic/user/requirements.txt

    schedule:
        build: ./services/atomic/schedule
        container_name: schedule
        networks: [spm-net]
        ports: ["5300:5300"]
        environment:
            SUPABASE_URL: ${SUPABASE_URL}
            SUPABASE_API_KEY: ${SUPABASE_API_KEY}
        develop:
            watch:
                - action: sync
                  path: ./services/atomic/schedule
                  target: /app
                  ignore:
                      - "**/__pycache__/**"
                      - "**/.venv/**"
                      - "**/node_modules/**"
                      - "**/.pytest_cache/**"
                      - ".git/**"
                - action: rebuild
                  path: ./services/atomic/schedule/Dockerfile
                - action: rebuild
                  path: ./services/atomic/schedule/requirements.txt

    manage-task:
        build: ./services/composite/manage_task
        container_name: manage-task
        networks: [spm-net]
        ports: ["4000:4000"]
        environment:
            INTERNAL_API_KEY: ${INTERNAL_API_KEY}
            KAFKA_BOOTSTRAP_SERVERS: kafka:9092
        develop:
            watch:
                - action: sync
                  path: ./services/composite/manage_task
                  target: /app
                  ignore:
                      - "**/__pycache__/**"
                      - "**/.venv/**"
                      - "**/node_modules/**"
                      - ".git/**"
                - action: rebuild
                  path: ./services/composite/manage_task/Dockerfile
                - action: rebuild
                  path: ./services/composite/manage_task/requirements.txt
                  # If Node: use package.json / package-lock.json instead

    manage-project:
        build: ./services/composite/manage_project
        container_name: manage-project
        networks: [spm-net]
        ports: ["4100:4100"]
        environment:
            INTERNAL_API_KEY: ${INTERNAL_API_KEY}
            KAFKA_BOOTSTRAP_SERVERS: kafka:9092
        develop:
            watch:
                - action: sync
                  path: ./services/composite/manage_project
                  target: /app
                  ignore:
                      - "**/__pycache__/**"
                      - "**/.venv/**"
                      - "**/node_modules/**"
                      - ".git/**"
                - action: rebuild
                  path: ./services/composite/manage_project/Dockerfile
                - action: rebuild
                  path: ./services/composite/manage_project/requirements.txt

    notify-user:
        build: ./services/composite/notify_user
        container_name: notify-user
        networks: [spm-net]
        ports: ["4500:4500"]
        depends_on:
            - schedule
            - kafka
        environment:
            INTERNAL_API_KEY: ${INTERNAL_API_KEY}
            KAFKA_BOOTSTRAP_SERVERS: kafka:9092
        develop:
            watch:
                - action: sync
                  path: ./services/composite/notify_user
                  target: /app
                  ignore:
                      - "**/__pycache__/**"
                      - "**/.venv/**"
                      - "**/node_modules/**"
                      - ".git/**"
                - action: rebuild
                  path: ./services/composite/notify_user/Dockerfile
                - action: rebuild
                  path: ./services/composite/notify_user/requirements.txt

    email:
        build: ./services/email
        container_name: email
        networks: [spm-net]
        depends_on:
            kafka:
                condition: service_healthy
        environment:
            KAFKA_BOOTSTRAP_SERVERS: kafka:9092
            SMTP_SERVER: ${SMTP_SERVER}
            SMTP_PORT: ${SMTP_PORT}
            SMTP_USER: ${SMTP_USER}
            SMTP_PASS: ${SMTP_PASS}
        develop:
            watch:
                - action: sync
                  path: ./services/email
                  target: /app
                  ignore:
                      - "**/__pycache__/**"
                      - "**/.venv/**"
                      - "**/node_modules/**"
                      - ".git/**"
                - action: rebuild
                  path: ./services/email/Dockerfile
                - action: rebuild
                  path: ./services/email/requirements.txt

    kafka:
        image: apache/kafka-native:4.0.0
        container_name: kafka
        restart: always
        networks: [spm-net]
        ports:
            - "9092:9092"   # host-facing listener
        environment:
            # Listeners
            KAFKA_LISTENERS: CONTROLLER://0.0.0.0:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
            KAFKA_ADVERTISED_LISTENERS: HOST://kafka:9092,DOCKER://kafka:9093
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

            # KRaft
            KAFKA_NODE_ID: 1
            KAFKA_PROCESS_ROLES: broker,controller
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9091
            KAFKA_CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qi  # any 22-char base64-ish string is fine

            # Broker config
            KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" # auto create topics if they don't exist

        healthcheck:
            test: ["CMD", "nc", "-z", "localhost", "9092"]
            interval: 10s
            timeout: 5s
            retries: 10
            start_period: 30s


    # kafka:
    #     image: apache/kafka:3.8.0
    #     container_name: kafka
    #     restart: unless-stopped
    #     networks: [spm-net]
    #     ports:
    #     - "9092:9092"
    #     environment:
    #         # Single-node KRaft config
    #         KAFKA_NODE_ID: 1
    #         KAFKA_PROCESS_ROLES: "broker,controller"
    #         KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
    #         KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
    #         KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
    #         KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
    #         KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
    #         KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
    #         KAFKA_LOG_DIRS: "/var/lib/kafka/data"
    #         # Cluster format ID – any stable string works for single broker
    #         KAFKA_CLUSTER_ID: "6nK1kC3xT8e2fQk1kP9kYA"
    #     volumes:
    #     - kafka-data:/var/lib/kafka/data
    #     healthcheck:
    #         test: ["CMD", "bash", "-lc", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
    #         interval: 10s
    #         timeout: 5s
    #         retries: 15


    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        container_name: kafka-ui
        restart: always
        depends_on: [kafka]
        networks: [spm-net]
        ports: ["8080:8080"]
        environment:
            DYNAMIC_CONFIG_ENABLED: "true"
            KAFKA_CLUSTERS_0_NAME: spm-cluster
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

    # kafka-setup:
    #     image: apache/kafka-native:4.0.0
    #     depends_on:
    #         kafka:
    #             condition: service_healthy
    #     networks: [spm-net]
    #     volumes:
    #     - ./kafka/kafka-setup.sh:/kafka-setup.sh
    #     entrypoint: ["/bin/bash", "-lc"]
    #     command: "/kafka-setup.sh"
