name: Endpoint Integration Test

on:
    pull_request:
        branches:
            - main
    push:
        branches:
            - main
    workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
    test-service:
        runs-on: ubuntu-latest
        env:
            SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
            SUPABASE_API_KEY: ${{ secrets.SUPABASE_API_KEY }}
            SUPABASE_JWT_SECRET: ${{secrets.SUPABASE_JWT_SECRET}}
            SUPABASE_SERVICE_ROLE_KEY: ${{secrets.SUPABASE_SERVICE_ROLE_KEY}}
            INTERNAL_API_KEY: ${{secrets.INTERNAL_API_KEY}}
            
        defaults:
            run:
                working-directory: ./backend
        
        steps:
            - name: ðŸ“¥ Checkout code
              uses: actions/checkout@v4
            
            - name: Setup Go
              uses: actions/setup-go@v4
              with:
                go-version: '1.25'
                cache: true # Enable caching for faster builds
            
            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Cache Docker layers
              uses: actions/cache@v3
              with:
                path: /tmp/.buildx-cache
                key: ${{ runner.os }}-buildx-${{ github.sha }}
                restore-keys: |
                  ${{ runner.os }}-buildx-

            - name: Start services (with parallel build and cache)
              run: |
                # Set up Docker BuildKit for layer caching
                export DOCKER_BUILDKIT=1
                export BUILDKIT_PROGRESS=plain
                
                # Use parallel builds with cache
                docker compose up -d --build --parallel
                
                # Wait for services to be healthy instead of fixed sleep
                echo "Waiting for services to be ready..."
                timeout 60s bash -c 'until docker compose ps | grep -q "healthy\|Up"; do sleep 1; done'
                echo "Services are ready!"
            
            - name: Run go test integration tests (with timeout)
              run: |
                cd ../test/integration
                go test -v -timeout 5m -race  # Add race detection and timeout

            - name: Container Cleanup
              if: always()
              run: |
                docker compose down --volumes --remove-orphans
                docker system prune -f  # Clean up unused resources