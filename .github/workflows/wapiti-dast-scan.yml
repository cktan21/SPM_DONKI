name: DAST Scan with Wapiti

on:
    pull_request:
        branches:
            - main
    push:
        branches:
            - main
    workflow_dispatch:

jobs:
    dast_scan:
        runs-on: ubuntu-latest

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🛠️ Setup Bun
              uses: oven-sh/setup-bun@v1

            - name: Enter Frontend Folder
              uses: cd frontend

            - name: 📦 Install dependencies
              run: bun install

            - name: 🚀 Build Nuxt.js application
              run: bun run build

            - name: 🌐 Start a temporary web server
              run: bun run start &
              # The '&' runs the command in the background.
              # This is crucial so the workflow can continue to the next step.

            - name: ⏳ Wait for server to be ready
              # A quick wait to ensure the server is up and listening.
              # This can be more robust with a script that checks for a response.
              run: sleep 10

            - name: 🛡️ Run Wapiti DAST scan
              run: |
                  # Install Wapiti
                  pip install wapiti3

                  # Run the scan against the local server.
                  # We'll use http://localhost:3000 as the target.
                  # The -f html -o report-folder generates an HTML report.
                  # The --scan-force aggressive option increases the scan's thoroughness.
                  wapiti -u http://localhost:3000 --scope domain -f html -o wapiti_report --scan-force aggressive
              env:
                  # dummy ENV change when we actually have real envs LOL
                  NODE_ENV: production

            - name: 📁 Upload scan report as artifact
              uses: actions/upload-artifact@v4
              with:
                  name: wapiti-report
                  path: wapiti_report/
